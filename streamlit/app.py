import streamlit as st
from face_recognition_utils import recognize_from_ip_camera
from streamlit_webrtc import webrtc_streamer, WebRtcMode, RTCConfiguration
from video_processor import VideoProcessor
from stream_processor import VProcessor
import cv2
import numpy as np
import tempfile

# C·∫•u h√¨nh TURN/STUN
RTC_CONFIGURATION = RTCConfiguration(
    {
        "iceServers": [
            {"urls": ["stun:stun.relay.metered.ca:80"]},
            {
                "urls": ["turn:global.relay.metered.ca:80"],
                "username": "8ea627684cd9d3f67e9a5618",
                "credential": "NK/rJapMisCsSdYh",
            },
            {
                "urls": ["turn:global.relay.metered.ca:443"],
                "username": "8ea627684cd9d3f67e9a5618",
                "credential": "NK/rJapMisCsSdYh",
            },
        ]
    }
)

st.title("·ª®ng d·ª•ng x·ª≠ l√Ω h√¨nh ·∫£nh")

menu = st.sidebar.radio(
    "Ch·ªçn ch·ª©c nƒÉng:",
    ("Nh·∫≠n di·ªán khu√¥n m·∫∑t", "Nh·∫≠n di·ªán ƒë·ªëi t∆∞·ª£ng", "X·ª≠ l√Ω ·∫£nh")
)

def start_streaming():
    webrtc_streamer(
        key="WYH",
        mode=WebRtcMode.SENDRECV,
        rtc_configuration=RTC_CONFIGURATION,
        media_stream_constraints={"video": True, "audio": False},
        video_processor_factory=VProcessor,
        async_processing=True,
    )

if menu == "Nh·∫≠n di·ªán khu√¥n m·∫∑t":
    st.header("üîç Nh·∫≠n di·ªán khu√¥n m·∫∑t")
    option = st.radio(
        "Ch·ªçn ngu·ªìn ƒë·∫ßu v√†o:",
        ("T·∫£i ·∫£nh", "T·∫£i video", "Ch·ª•p ·∫£nh", "Stream Camera")
    )

    if option == "T·∫£i ·∫£nh":
        uploaded_file = st.file_uploader("T·∫£i ·∫£nh l√™n", type=["jpg", "jpeg", "png", "bmp"])
        if uploaded_file is not None:
            file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
            img = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)

            # T·∫°o 2 c·ªôt ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh ngang nhau
            col1, col2 = st.columns(2)

            # Hi·ªÉn th·ªã ·∫£nh g·ªëc ·ªü c·ªôt ƒë·∫ßu ti√™n v·ªõi k√≠ch th∆∞·ªõc nh·ªè h∆°n
            with col1:
                st.image(img, caption="·∫¢nh g·ªëc", use_column_width=True, channels="BGR")

            processor = VideoProcessor()
            result_img, result_text = processor.process_frame(img)

            # Hi·ªÉn th·ªã ·∫£nh k·∫øt qu·∫£ nh·∫≠n di·ªán ·ªü c·ªôt th·ª© hai v·ªõi k√≠ch th∆∞·ªõc nh·ªè h∆°n
            with col2:
                st.image(result_img, caption="K·∫øt qu·∫£ nh·∫≠n di·ªán", use_column_width=True, channels="BGR")

            # Hi·ªÉn th·ªã k·∫øt qu·∫£ nh·∫≠n di·ªán d∆∞·ªõi ·∫£nh k·∫øt qu·∫£
            if result_text:
                st.text(f"Nh·∫≠n di·ªán: {result_text}")

        

    elif option == "T·∫£i video":
        uploaded_video = st.file_uploader("T·∫£i video l√™n", type=["mp4", "avi", "mov"])
        if uploaded_video is not None:
            tfile = tempfile.NamedTemporaryFile(delete=False)
            tfile.write(uploaded_video.read())
            cap = cv2.VideoCapture(tfile.name)

            stframe = st.empty()
            processor = VideoProcessor()

            while cap.isOpened():
                ret, frame = cap.read()
                if not ret:
                    break
                frame = processor.process_frame(frame)
                stframe.image(frame, channels="BGR")
            cap.release()
            

    elif option == "Ch·ª•p ·∫£nh":
        st.write("K·∫øt n·ªëi t·ªõi IP Camera...")
        ip_url = st.text_input("Nh·∫≠p URL IP Camera", value="http://192.168.0.101:8080/video")

        if st.button("Nh·∫≠n di·ªán"):
            with st.spinner("ƒêang nh·∫≠n di·ªán..."):
                img, result_text = recognize_from_ip_camera(ip_url)
                if img is not None:
                    st.image(img, caption=f"K·∫øt qu·∫£: {result_text}", channels="BGR")
                else:
                    st.error(result_text)

    elif option == "Stream Camera":
        st.subheader("üì° Streaming t·ª´ webcam (WebRTC)")
        start_streaming()
        

elif menu == "Nh·∫≠n di·ªán ƒë·ªëi t∆∞·ª£ng":
    st.header("üß† Nh·∫≠n di·ªán ƒë·ªëi t∆∞·ª£ng")
    st.info("Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...")

elif menu == "X·ª≠ l√Ω ·∫£nh":
    st.header("üñºÔ∏è X·ª≠ l√Ω ·∫£nh")
    st.info("Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...")

st.markdown("---")
st.caption("·ª®ng d·ª•ng demo b·ªüi HieuDuong.")
